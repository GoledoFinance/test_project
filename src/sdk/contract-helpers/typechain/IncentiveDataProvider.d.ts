/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    CallOverrides,
  } from "ethers";
  import { BytesLike } from "@ethersproject/bytes";
  import { Listener, Provider } from "@ethersproject/providers";
  import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
  import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";
  
  interface IncentiveDataProviderInterface extends ethers.utils.Interface {
    functions: {
      "getUserIncentive(address)": FunctionFragment;
      "incentiveController()": FunctionFragment;
      "masterChef()": FunctionFragment;
      "multiFeeDistribution()": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "getUserIncentive",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "incentiveController",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "masterChef",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "multiFeeDistribution",
      values?: undefined
    ): string;
  
    decodeFunctionResult(
      functionFragment: "getUserIncentive",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "incentiveController",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "multiFeeDistribution",
      data: BytesLike
    ): Result;
  
    events: {};
  }
  
  export class IncentiveDataProvider extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;
  
    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;
  
    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
      event: TypedEventFilter<EventArgsArray, EventArgsObject>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
  
    interface: IncentiveDataProviderInterface;
  
    functions: {
      getUserIncentive(
        _account: string,
        overrides?: CallOverrides
      ): Promise<
        [
          ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[],
          [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          },
          ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[],
          [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([string, BigNumber] & { token: string; amount: BigNumber })[]
          ] & {
            walletBalance: BigNumber;
            totalBalance: BigNumber;
            unlockedBalance: BigNumber;
            earnedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            lockedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            rewards: ([string, BigNumber] & {
              token: string;
              amount: BigNumber;
            })[];
          },
          [string, string, number, BigNumber, BigNumber] & {
            token: string;
            symbol: string;
            decimals: number;
            totalSupply: BigNumber;
            lockedSupply: BigNumber;
          }
        ] & {
          _controllerUserData: ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[];
          _controllerData: [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          };
          _chefUserData: ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[];
          _chefData: [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          };
          _stakeUserData: [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([string, BigNumber] & { token: string; amount: BigNumber })[]
          ] & {
            walletBalance: BigNumber;
            totalBalance: BigNumber;
            unlockedBalance: BigNumber;
            earnedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            lockedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            rewards: ([string, BigNumber] & {
              token: string;
              amount: BigNumber;
            })[];
          };
          _stakeData: [string, string, number, BigNumber, BigNumber] & {
            token: string;
            symbol: string;
            decimals: number;
            totalSupply: BigNumber;
            lockedSupply: BigNumber;
          };
        }
      >;
  
      incentiveController(overrides?: CallOverrides): Promise<[string]>;
  
      masterChef(overrides?: CallOverrides): Promise<[string]>;
  
      multiFeeDistribution(overrides?: CallOverrides): Promise<[string]>;
    };
  
    getUserIncentive(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          symbol: string;
          decimals: number;
          walletBalance: BigNumber;
          totalSupply: BigNumber;
          staked: BigNumber;
          claimable: BigNumber;
          allocPoint: BigNumber;
        })[],
        [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          rewardsPerSecond: BigNumber;
        },
        ([
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          symbol: string;
          decimals: number;
          walletBalance: BigNumber;
          totalSupply: BigNumber;
          staked: BigNumber;
          claimable: BigNumber;
          allocPoint: BigNumber;
        })[],
        [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          rewardsPerSecond: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[],
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[],
          ([string, BigNumber] & { token: string; amount: BigNumber })[]
        ] & {
          walletBalance: BigNumber;
          totalBalance: BigNumber;
          unlockedBalance: BigNumber;
          earnedBalances: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[];
          lockedBalances: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[];
          rewards: ([string, BigNumber] & { token: string; amount: BigNumber })[];
        },
        [string, string, number, BigNumber, BigNumber] & {
          token: string;
          symbol: string;
          decimals: number;
          totalSupply: BigNumber;
          lockedSupply: BigNumber;
        }
      ] & {
        _controllerUserData: ([
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          symbol: string;
          decimals: number;
          walletBalance: BigNumber;
          totalSupply: BigNumber;
          staked: BigNumber;
          claimable: BigNumber;
          allocPoint: BigNumber;
        })[];
        _controllerData: [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          rewardsPerSecond: BigNumber;
        };
        _chefUserData: ([
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          symbol: string;
          decimals: number;
          walletBalance: BigNumber;
          totalSupply: BigNumber;
          staked: BigNumber;
          claimable: BigNumber;
          allocPoint: BigNumber;
        })[];
        _chefData: [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          rewardsPerSecond: BigNumber;
        };
        _stakeUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[],
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[],
          ([string, BigNumber] & { token: string; amount: BigNumber })[]
        ] & {
          walletBalance: BigNumber;
          totalBalance: BigNumber;
          unlockedBalance: BigNumber;
          earnedBalances: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[];
          lockedBalances: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            unlockTime: BigNumber;
          })[];
          rewards: ([string, BigNumber] & { token: string; amount: BigNumber })[];
        };
        _stakeData: [string, string, number, BigNumber, BigNumber] & {
          token: string;
          symbol: string;
          decimals: number;
          totalSupply: BigNumber;
          lockedSupply: BigNumber;
        };
      }
    >;
  
    incentiveController(overrides?: CallOverrides): Promise<string>;
  
    masterChef(overrides?: CallOverrides): Promise<string>;
  
    multiFeeDistribution(overrides?: CallOverrides): Promise<string>;
  
    callStatic: {
      getUserIncentive(
        _account: string,
        overrides?: CallOverrides
      ): Promise<
        [
          ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[],
          [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          },
          ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[],
          [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([string, BigNumber] & { token: string; amount: BigNumber })[]
          ] & {
            walletBalance: BigNumber;
            totalBalance: BigNumber;
            unlockedBalance: BigNumber;
            earnedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            lockedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            rewards: ([string, BigNumber] & {
              token: string;
              amount: BigNumber;
            })[];
          },
          [string, string, number, BigNumber, BigNumber] & {
            token: string;
            symbol: string;
            decimals: number;
            totalSupply: BigNumber;
            lockedSupply: BigNumber;
          }
        ] & {
          _controllerUserData: ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[];
          _controllerData: [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          };
          _chefUserData: ([
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            token: string;
            symbol: string;
            decimals: number;
            walletBalance: BigNumber;
            totalSupply: BigNumber;
            staked: BigNumber;
            claimable: BigNumber;
            allocPoint: BigNumber;
          })[];
          _chefData: [BigNumber, BigNumber] & {
            totalAllocPoint: BigNumber;
            rewardsPerSecond: BigNumber;
          };
          _stakeUserData: [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[],
            ([string, BigNumber] & { token: string; amount: BigNumber })[]
          ] & {
            walletBalance: BigNumber;
            totalBalance: BigNumber;
            unlockedBalance: BigNumber;
            earnedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            lockedBalances: ([BigNumber, BigNumber] & {
              amount: BigNumber;
              unlockTime: BigNumber;
            })[];
            rewards: ([string, BigNumber] & {
              token: string;
              amount: BigNumber;
            })[];
          };
          _stakeData: [string, string, number, BigNumber, BigNumber] & {
            token: string;
            symbol: string;
            decimals: number;
            totalSupply: BigNumber;
            lockedSupply: BigNumber;
          };
        }
      >;
  
      incentiveController(overrides?: CallOverrides): Promise<string>;
  
      masterChef(overrides?: CallOverrides): Promise<string>;
  
      multiFeeDistribution(overrides?: CallOverrides): Promise<string>;
    };
  
    filters: {};
  
    estimateGas: {
      getUserIncentive(
        _account: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      incentiveController(overrides?: CallOverrides): Promise<BigNumber>;
  
      masterChef(overrides?: CallOverrides): Promise<BigNumber>;
  
      multiFeeDistribution(overrides?: CallOverrides): Promise<BigNumber>;
    };
  
    populateTransaction: {
      getUserIncentive(
        _account: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      incentiveController(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      multiFeeDistribution(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
    };
  }
  