/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WalletBalanceProvider,
  WalletBalanceProviderInterface,
} from "../WalletBalanceProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "batchBalanceOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserWalletBalances",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a1f806100206000396000f3fe6080604052600436106100385760003560e01c80630240534314610072578063b59b28ef146100a9578063f7888aec146100d65761006d565b3661006d5761004633610103565b61006b5760405162461bcd60e51b815260040161006290610988565b60405180910390fd5b005b600080fd5b34801561007e57600080fd5b5061009261008d3660046106ff565b610109565b6040516100a09291906108ee565b60405180910390f35b3480156100b557600080fd5b506100c96100c4366004610737565b610475565b6040516100a0919061094e565b3480156100e257600080fd5b506100f66100f13660046106ff565b610552565b6040516100a091906109a4565b3b151590565b6060806000846001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561014757600080fd5b505afa15801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f91906106e3565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101bc57600080fd5b505afa1580156101d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101f891908101906107a0565b90506000815160010167ffffffffffffffff8111801561021757600080fd5b50604051908082528060200260200182016040528015610241578160200160208202803683370190505b50905060005b82518110156102905782818151811061025c57fe5b602002602001015182828151811061027057fe5b6001600160a01b0390921660209283029190910190910152600101610247565b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee818351815181106102b357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000815167ffffffffffffffff811180156102ed57600080fd5b50604051908082528060200260200182016040528015610317578160200160208202803683370190505b50905060005b835181101561042f576000856001600160a01b031663c44b11f785848151811061034357fe5b60200260200101516040518263ffffffff1660e01b815260040161036791906108da565b60206040518083038186803b15801561037f57600080fd5b505afa158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b7919061084d565b905060006103c482610642565b5050509050806103ef5760008484815181106103dc57fe5b6020026020010181815250505050610427565b61040c8a8685815181106103ff57fe5b6020026020010151610552565b84848151811061041857fe5b60200260200101818152505050505b60010161031d565b5061044e8773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610552565b8184518151811061045b57fe5b6020908102919091010152909450925050505b9250929050565b6060600084830267ffffffffffffffff8111801561049257600080fd5b506040519080825280602002602001820160405280156104bc578160200160208202803683370190505b50905060005b858110156105485760005b8481101561053f5761051a8888848181106104e457fe5b90506020020160208101906104f991906106c0565b87878481811061050557fe5b90506020020160208101906100f191906106c0565b83518490848802840190811061052c57fe5b60209081029190910101526001016104cd565b506001016104c2565b5095945050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561058a57506001600160a01b0382163161063c565b61059c826001600160a01b0316610103565b15610624576040516370a0823160e01b81526001600160a01b038316906370a08231906105cd9086906004016108da565b60206040518083038186803b1580156105e557600080fd5b505afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190610888565b905061063c565b60405162461bcd60e51b815260040161006290610961565b92915050565b51670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000909116151590565b60008083601f84011261068f578081fd5b50813567ffffffffffffffff8111156106a6578182fd5b602083019150836020808302850101111561046e57600080fd5b6000602082840312156106d1578081fd5b81356106dc816109d1565b9392505050565b6000602082840312156106f4578081fd5b81516106dc816109d1565b60008060408385031215610711578081fd5b823561071c816109d1565b9150602083013561072c816109d1565b809150509250929050565b6000806000806040858703121561074c578182fd5b843567ffffffffffffffff80821115610763578384fd5b61076f8883890161067e565b90965094506020870135915080821115610787578384fd5b506107948782880161067e565b95989497509550505050565b600060208083850312156107b2578182fd5b825167ffffffffffffffff808211156107c9578384fd5b818501915085601f8301126107dc578384fd5b8151818111156107e857fe5b83810291506107f88483016109ad565b8181528481019084860184860187018a1015610812578788fd5b8795505b83861015610840578051945061082b856109d1565b84835260019590950194918601918601610816565b5098975050505050505050565b60006020828403121561085e578081fd5b6040516020810181811067ffffffffffffffff8211171561087b57fe5b6040529151825250919050565b600060208284031215610899578081fd5b5051919050565b6000815180845260208085019450808401835b838110156108cf578151875295820195908201906001016108b3565b509495945050505050565b6001600160a01b0391909116815260200190565b604080825283519082018190526000906020906060840190828701845b828110156109305781516001600160a01b03168452928401929084019060010161090b565b5050508381038285015261094481866108a0565b9695505050505050565b6000602082526106dc60208301846108a0565b6020808252600d908201526c24a72b20a624a22faa27a5a2a760991b604082015260600190565b602080825260029082015261191960f11b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff811182821017156109c957fe5b604052919050565b6001600160a01b03811681146109e657600080fd5b5056fea2646970667358221220a2a734a6ebc1db4c4e02d30d9692725a57ee4958cfd7dc7cdea6dad0b10e82b564736f6c63430007060033";

export class WalletBalanceProvider__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WalletBalanceProvider> {
    return super.deploy(overrides || {}) as Promise<WalletBalanceProvider>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): WalletBalanceProvider {
    return super.attach(address) as WalletBalanceProvider;
  }
  connect(signer: Signer): WalletBalanceProvider__factory {
    return super.connect(signer) as WalletBalanceProvider__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WalletBalanceProviderInterface {
    return new utils.Interface(_abi) as WalletBalanceProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WalletBalanceProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WalletBalanceProvider;
  }
}
