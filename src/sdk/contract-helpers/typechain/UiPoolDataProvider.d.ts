/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UiPoolDataProviderInterface extends ethers.utils.Interface {
  functions: {
    "MOCK_USD_ADDRESS()": FunctionFragment;
    "getReservesData(address,address)": FunctionFragment;
    "getReservesList(address)": FunctionFragment;
    "getSimpleReservesData(address)": FunctionFragment;
    "getUserReservesData(address,address)": FunctionFragment;
    "incentivesController()": FunctionFragment;
    "oracle()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MOCK_USD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSimpleReservesData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReservesData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MOCK_USD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSimpleReservesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReservesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;

  events: {};
}

export class UiPoolDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UiPoolDataProviderInterface;

  functions: {
    MOCK_USD_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    getReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: BigNumber;
          baseLTVasCollateral: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          reserveFactor: BigNumber;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          isActive: boolean;
          isFrozen: boolean;
          liquidityIndex: BigNumber;
          variableBorrowIndex: BigNumber;
          liquidityRate: BigNumber;
          variableBorrowRate: BigNumber;
          stableBorrowRate: BigNumber;
          lastUpdateTimestamp: number;
          aTokenAddress: string;
          stableDebtTokenAddress: string;
          variableDebtTokenAddress: string;
          interestRateStrategyAddress: string;
          availableLiquidity: BigNumber;
          totalPrincipalStableDebt: BigNumber;
          averageStableRate: BigNumber;
          stableDebtLastUpdateTimestamp: BigNumber;
          totalScaledVariableDebt: BigNumber;
          priceInEth: BigNumber;
          variableRateSlope1: BigNumber;
          variableRateSlope2: BigNumber;
          stableRateSlope1: BigNumber;
          stableRateSlope2: BigNumber;
          aEmissionPerSecond: BigNumber;
          vEmissionPerSecond: BigNumber;
          sEmissionPerSecond: BigNumber;
          aIncentivesLastUpdateTimestamp: BigNumber;
          vIncentivesLastUpdateTimestamp: BigNumber;
          sIncentivesLastUpdateTimestamp: BigNumber;
          aTokenIncentivesIndex: BigNumber;
          vTokenIncentivesIndex: BigNumber;
          sTokenIncentivesIndex: BigNumber;
        })[],
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          scaledATokenBalance: BigNumber;
          usageAsCollateralEnabledOnUser: boolean;
          stableBorrowRate: BigNumber;
          scaledVariableDebt: BigNumber;
          principalStableDebt: BigNumber;
          stableBorrowLastUpdateTimestamp: BigNumber;
          aTokenincentivesUserIndex: BigNumber;
          vTokenincentivesUserIndex: BigNumber;
          sTokenincentivesUserIndex: BigNumber;
        })[],
        BigNumber,
        [BigNumber, BigNumber] & {
          userUnclaimedRewards: BigNumber;
          emissionEndTimestamp: BigNumber;
        }
      ]
    >;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSimpleReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: BigNumber;
          baseLTVasCollateral: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          reserveFactor: BigNumber;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          isActive: boolean;
          isFrozen: boolean;
          liquidityIndex: BigNumber;
          variableBorrowIndex: BigNumber;
          liquidityRate: BigNumber;
          variableBorrowRate: BigNumber;
          stableBorrowRate: BigNumber;
          lastUpdateTimestamp: number;
          aTokenAddress: string;
          stableDebtTokenAddress: string;
          variableDebtTokenAddress: string;
          interestRateStrategyAddress: string;
          availableLiquidity: BigNumber;
          totalPrincipalStableDebt: BigNumber;
          averageStableRate: BigNumber;
          stableDebtLastUpdateTimestamp: BigNumber;
          totalScaledVariableDebt: BigNumber;
          priceInEth: BigNumber;
          variableRateSlope1: BigNumber;
          variableRateSlope2: BigNumber;
          stableRateSlope1: BigNumber;
          stableRateSlope2: BigNumber;
          aEmissionPerSecond: BigNumber;
          vEmissionPerSecond: BigNumber;
          sEmissionPerSecond: BigNumber;
          aIncentivesLastUpdateTimestamp: BigNumber;
          vIncentivesLastUpdateTimestamp: BigNumber;
          sIncentivesLastUpdateTimestamp: BigNumber;
          aTokenIncentivesIndex: BigNumber;
          vTokenIncentivesIndex: BigNumber;
          sTokenIncentivesIndex: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ]
    >;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          scaledATokenBalance: BigNumber;
          usageAsCollateralEnabledOnUser: boolean;
          stableBorrowRate: BigNumber;
          scaledVariableDebt: BigNumber;
          principalStableDebt: BigNumber;
          stableBorrowLastUpdateTimestamp: BigNumber;
          aTokenincentivesUserIndex: BigNumber;
          vTokenincentivesUserIndex: BigNumber;
          sTokenincentivesUserIndex: BigNumber;
        })[],
        BigNumber
      ]
    >;

    incentivesController(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;
  };

  MOCK_USD_ADDRESS(overrides?: CallOverrides): Promise<string>;

  getReservesData(
    provider: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlyingAsset: string;
        name: string;
        symbol: string;
        decimals: BigNumber;
        baseLTVasCollateral: BigNumber;
        reserveLiquidationThreshold: BigNumber;
        reserveLiquidationBonus: BigNumber;
        reserveFactor: BigNumber;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        isActive: boolean;
        isFrozen: boolean;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        liquidityRate: BigNumber;
        variableBorrowRate: BigNumber;
        stableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        aTokenAddress: string;
        stableDebtTokenAddress: string;
        variableDebtTokenAddress: string;
        interestRateStrategyAddress: string;
        availableLiquidity: BigNumber;
        totalPrincipalStableDebt: BigNumber;
        averageStableRate: BigNumber;
        stableDebtLastUpdateTimestamp: BigNumber;
        totalScaledVariableDebt: BigNumber;
        priceInEth: BigNumber;
        variableRateSlope1: BigNumber;
        variableRateSlope2: BigNumber;
        stableRateSlope1: BigNumber;
        stableRateSlope2: BigNumber;
        aEmissionPerSecond: BigNumber;
        vEmissionPerSecond: BigNumber;
        sEmissionPerSecond: BigNumber;
        aIncentivesLastUpdateTimestamp: BigNumber;
        vIncentivesLastUpdateTimestamp: BigNumber;
        sIncentivesLastUpdateTimestamp: BigNumber;
        aTokenIncentivesIndex: BigNumber;
        vTokenIncentivesIndex: BigNumber;
        sTokenIncentivesIndex: BigNumber;
      })[],
      ([
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlyingAsset: string;
        scaledATokenBalance: BigNumber;
        usageAsCollateralEnabledOnUser: boolean;
        stableBorrowRate: BigNumber;
        scaledVariableDebt: BigNumber;
        principalStableDebt: BigNumber;
        stableBorrowLastUpdateTimestamp: BigNumber;
        aTokenincentivesUserIndex: BigNumber;
        vTokenincentivesUserIndex: BigNumber;
        sTokenincentivesUserIndex: BigNumber;
      })[],
      BigNumber,
      [BigNumber, BigNumber] & {
        userUnclaimedRewards: BigNumber;
        emissionEndTimestamp: BigNumber;
      }
    ]
  >;

  getReservesList(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSimpleReservesData(
    provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlyingAsset: string;
        name: string;
        symbol: string;
        decimals: BigNumber;
        baseLTVasCollateral: BigNumber;
        reserveLiquidationThreshold: BigNumber;
        reserveLiquidationBonus: BigNumber;
        reserveFactor: BigNumber;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        isActive: boolean;
        isFrozen: boolean;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        liquidityRate: BigNumber;
        variableBorrowRate: BigNumber;
        stableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        aTokenAddress: string;
        stableDebtTokenAddress: string;
        variableDebtTokenAddress: string;
        interestRateStrategyAddress: string;
        availableLiquidity: BigNumber;
        totalPrincipalStableDebt: BigNumber;
        averageStableRate: BigNumber;
        stableDebtLastUpdateTimestamp: BigNumber;
        totalScaledVariableDebt: BigNumber;
        priceInEth: BigNumber;
        variableRateSlope1: BigNumber;
        variableRateSlope2: BigNumber;
        stableRateSlope1: BigNumber;
        stableRateSlope2: BigNumber;
        aEmissionPerSecond: BigNumber;
        vEmissionPerSecond: BigNumber;
        sEmissionPerSecond: BigNumber;
        aIncentivesLastUpdateTimestamp: BigNumber;
        vIncentivesLastUpdateTimestamp: BigNumber;
        sIncentivesLastUpdateTimestamp: BigNumber;
        aTokenIncentivesIndex: BigNumber;
        vTokenIncentivesIndex: BigNumber;
        sTokenIncentivesIndex: BigNumber;
      })[],
      BigNumber,
      BigNumber
    ]
  >;

  getUserReservesData(
    provider: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlyingAsset: string;
        scaledATokenBalance: BigNumber;
        usageAsCollateralEnabledOnUser: boolean;
        stableBorrowRate: BigNumber;
        scaledVariableDebt: BigNumber;
        principalStableDebt: BigNumber;
        stableBorrowLastUpdateTimestamp: BigNumber;
        aTokenincentivesUserIndex: BigNumber;
        vTokenincentivesUserIndex: BigNumber;
        sTokenincentivesUserIndex: BigNumber;
      })[],
      BigNumber
    ]
  >;

  incentivesController(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MOCK_USD_ADDRESS(overrides?: CallOverrides): Promise<string>;

    getReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: BigNumber;
          baseLTVasCollateral: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          reserveFactor: BigNumber;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          isActive: boolean;
          isFrozen: boolean;
          liquidityIndex: BigNumber;
          variableBorrowIndex: BigNumber;
          liquidityRate: BigNumber;
          variableBorrowRate: BigNumber;
          stableBorrowRate: BigNumber;
          lastUpdateTimestamp: number;
          aTokenAddress: string;
          stableDebtTokenAddress: string;
          variableDebtTokenAddress: string;
          interestRateStrategyAddress: string;
          availableLiquidity: BigNumber;
          totalPrincipalStableDebt: BigNumber;
          averageStableRate: BigNumber;
          stableDebtLastUpdateTimestamp: BigNumber;
          totalScaledVariableDebt: BigNumber;
          priceInEth: BigNumber;
          variableRateSlope1: BigNumber;
          variableRateSlope2: BigNumber;
          stableRateSlope1: BigNumber;
          stableRateSlope2: BigNumber;
          aEmissionPerSecond: BigNumber;
          vEmissionPerSecond: BigNumber;
          sEmissionPerSecond: BigNumber;
          aIncentivesLastUpdateTimestamp: BigNumber;
          vIncentivesLastUpdateTimestamp: BigNumber;
          sIncentivesLastUpdateTimestamp: BigNumber;
          aTokenIncentivesIndex: BigNumber;
          vTokenIncentivesIndex: BigNumber;
          sTokenIncentivesIndex: BigNumber;
        })[],
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          scaledATokenBalance: BigNumber;
          usageAsCollateralEnabledOnUser: boolean;
          stableBorrowRate: BigNumber;
          scaledVariableDebt: BigNumber;
          principalStableDebt: BigNumber;
          stableBorrowLastUpdateTimestamp: BigNumber;
          aTokenincentivesUserIndex: BigNumber;
          vTokenincentivesUserIndex: BigNumber;
          sTokenincentivesUserIndex: BigNumber;
        })[],
        BigNumber,
        [BigNumber, BigNumber] & {
          userUnclaimedRewards: BigNumber;
          emissionEndTimestamp: BigNumber;
        }
      ]
    >;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSimpleReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: BigNumber;
          baseLTVasCollateral: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          reserveFactor: BigNumber;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          isActive: boolean;
          isFrozen: boolean;
          liquidityIndex: BigNumber;
          variableBorrowIndex: BigNumber;
          liquidityRate: BigNumber;
          variableBorrowRate: BigNumber;
          stableBorrowRate: BigNumber;
          lastUpdateTimestamp: number;
          aTokenAddress: string;
          stableDebtTokenAddress: string;
          variableDebtTokenAddress: string;
          interestRateStrategyAddress: string;
          availableLiquidity: BigNumber;
          totalPrincipalStableDebt: BigNumber;
          averageStableRate: BigNumber;
          stableDebtLastUpdateTimestamp: BigNumber;
          totalScaledVariableDebt: BigNumber;
          priceInEth: BigNumber;
          variableRateSlope1: BigNumber;
          variableRateSlope2: BigNumber;
          stableRateSlope1: BigNumber;
          stableRateSlope2: BigNumber;
          aEmissionPerSecond: BigNumber;
          vEmissionPerSecond: BigNumber;
          sEmissionPerSecond: BigNumber;
          aIncentivesLastUpdateTimestamp: BigNumber;
          vIncentivesLastUpdateTimestamp: BigNumber;
          sIncentivesLastUpdateTimestamp: BigNumber;
          aTokenIncentivesIndex: BigNumber;
          vTokenIncentivesIndex: BigNumber;
          sTokenIncentivesIndex: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ]
    >;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          underlyingAsset: string;
          scaledATokenBalance: BigNumber;
          usageAsCollateralEnabledOnUser: boolean;
          stableBorrowRate: BigNumber;
          scaledVariableDebt: BigNumber;
          principalStableDebt: BigNumber;
          stableBorrowLastUpdateTimestamp: BigNumber;
          aTokenincentivesUserIndex: BigNumber;
          vTokenincentivesUserIndex: BigNumber;
          sTokenincentivesUserIndex: BigNumber;
        })[],
        BigNumber
      ]
    >;

    incentivesController(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MOCK_USD_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    getReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSimpleReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MOCK_USD_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSimpleReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivesController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
